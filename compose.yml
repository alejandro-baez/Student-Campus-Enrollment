services:
  backend:
    build: ./Backend #Points to the Backend folder, where Dockerfile is located
    depends_on:
      - db
    ports:
      - "80:80"
    volumes:
      - ./Backend:/app # Mounts our Backend folder into /app inside container, allowing for hot reload
    working_dir: /app # Sets working directory inside the container
    environment:
      - ENV=production
      - DB_HOST=db
      - DATABASE_URL=postgresql://myuser:password@db:5432/campus_db
    # command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80", "--reload"]
    command: ["/bin/sh", "-c", "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 80 --reload"] #Alembic section allows me to connect to Postgres Docker
    networks:
      - app-network

  db:
    image: postgres:15
    expose:
      - "5432"
    networks:
      - app-network #This was the missing piece that wasn't allowing my application to connect to the database
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: password
      POSTGRES_DB: campus_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    working_dir: /app
    environment:
      - NODE_ENV=development
    command: ["npm", "run", "dev", "--", "--host"]
    networks:
      - app-network
    depends_on:
      - backend

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge